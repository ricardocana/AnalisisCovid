---
title: "Analysis Covid"
author: "Ricardo Ocana"
date: "18/4/2020"
output:
  html_document: default
  pdf_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(knitr)
#library(kableExtra)
library(tinytex)
library(dplyr)
library(rgeos)
library(tidymodels)
library(tidyverse)
library(rlang) # %>%
library(magrittr) # %<>%
library(lubridate)
library(rnaturalearth)
library(rnaturalearthdata)
library(car)
library(plotly)
library(xts)
library(dygraphs)
```

# Carga y limpieza preliminar de los datos

Los datos que se van a analizar en este documento, proceden de la compilacion hecha por usuarios de Kaggle. La fecha del análisis empieza el 18 de Abril de 2020.

```{python}


#datos = pd.read_csv('covid_19_clean_complete.csv')
```

```{r}
datos <- read.csv('covid_19_clean_complete.csv', stringsAsFactors = F)
datos %>% head(10) %>% kable()
```
```{r}
str(datos)
names(datos) <- c('Provincia_Estado',
                  'Pais_Region',
                  'Latitud', # N+ o S-
                  'Longitud',# E+ o W-
                  'Fecha',
                  'Casos_Confirmados',
                  'Casos_Muertos',
                  'Casos_Recuperados'
                  )
#datos %>% head(10) %>% kable() %>% kable_styling()
```

* Cualitativas se convierten con `factor` o bien `as.factor`
* Ordinales se convierten con `ordered`.
* Cuantitativos se convierten con `as.numeric`

Nuestras variables Cualitativas son: Provincia_Estado, Pais_Region, Casos Confirmados , Casos muertos y Casos recuperados
Nuestras variables cuantitativas son Latitud y Longitud.
Nuestras variables ordinales son Fecha

```{r}
datos$Provincia_Estado %<>% factor()
datos$Pais_Region %<>% factor()
#datos$Fecha %<>% as.Date(format="%m/%d/%y")
datos$Fecha %<>% mdy()
str(datos)

```



$$Confirmados = Muertos + Recuperados + Enfermos$$

```{r}
datos %<>%
  mutate(Casos_Enfermos = Casos_Confirmados - Casos_Muertos - Casos_Recuperados)
datos %>% filter(Casos_Confirmados > 1000) %>% head() %>% kable()


datos %>%
  filter(Casos_Enfermos < 0) %>%
  arrange(Provincia_Estado, Fecha) %>%
  kable()
```

```{r}
datos %>%
  filter(Provincia_Estado == 'Hainan') %>%
  kable()
```

```{r}
datos %>%
  filter(Provincia_Estado == 'Hainan', Casos_Enfermos > 0) %>%
  mutate(Casos_Recuperados = Casos_Recuperados + Casos_Enfermos,
         Casos_Enfermos = 0) %>%
  kable()
```

Análisis Geográfico

```{r}
#datos_europa <- datos[datos$Latitud > 38 & datos$Longitud > -25 & datos$Longitud < 30,]

datos_europa <- datos %>%
  filter(Latitud > 38, between(Longitud, -25, 30))

nrow(datos_europa)
```
```{r}
table(datos_europa$Pais_Region) %>%
  as.data.frame() %>%
  filter(Freq > 0) %>%
  kable()


datos_europa %>%
  filter(Fecha == ymd("2020/03/15")) %>%
  kable()
```

$$d(x,y) = \sqrt{x_{Lat}-y_{Lat}^2 + (x_{Long}-y_{Long})^2}$$

```{r}
distancia_grados <- function(x,y){
  sqrt((x[1]-y[1])^2 + (x[2]-y[2])^2)
}

distancia_grados_potsdam = function(x){
  potsdam = c(52.366956, 13.906734)
  distancia_grados(x, potsdam)

}
```

```{r}
dist_potsdam = apply(cbind(datos_europa$Latitud, datos_europa$Longitud),
                     MARGIN = 1,
                     FUN = distancia_grados_potsdam)


datos_europa %<>%
  mutate(dist_potsdam = dist_potsdam)
```

```{r}
datos_europa %>%
  filter(between(Fecha, dmy('2-3-2020'), dmy('7-3-2020')),
         dist_potsdam < 4) %>%
  kable()
```
Pintamos un mapa

```{r}
world <- ne_countries(scale = "medium", returnclass = "sf")

datos$Pais_Region = factor(datos$Pais_Region, levels = c(levels(datos$Pais_Region), "United States"))
datos[datos$Pais_Region=="US",]$Pais_Region = "United States"

ggplot(world) + geom_sf(color = 'black', aes(fill = mapcolor13)) + xlab('Longitud') + ylab('Latitud') +
  ggtitle('Mapa del Mundo', subtitle = 'COVID19')
```


```{r}
world %>%
  inner_join(datos, by = c('name' = 'Pais_Region')) %>%
  filter(Fecha == dmy('30-03-2020')) %>%
  ggplot() +
  geom_sf(color = 'black', aes(fill = Casos_Confirmados)) +
  xlab('Longitud') +
  #coord_sf(crs='+proj=laea + lat_0=50 + lon_0=10')+
  scale_fill_viridis_c(option = 'plasma', trans = 'sqrt') +
  ylab('Latitud') +
  ggtitle('Mapa del Mundo', subtitle = 'COVID19') -> grafico
  
ggplotly(grafico)
```

```{r}
datos %>%
  filter(Fecha == dmy('30-03-2020')) %>%
  ggplot(aes(Longitud, Latitud)) +
  geom_point(aes(size = log(Casos_Confirmados + 1), colour = log(Casos_Muertos+1))) +
  coord_fixed()+
  theme(legend.position = 'bottom') -> g
         
  
ggplotly(g)
```
```{r}
datos %>%
  filter(Fecha == ymd('2020-04-20'),
         Casos_Confirmados > 1000) %>%
  mutate(Prop_Muertos = Casos_Muertos/Casos_Confirmados,
         Ranking = dense_rank(desc(Prop_Muertos))) %>%
  arrange(Ranking) %>%
  head(30) %>%
  kable()
```
```{r}
datos$lat_class = cut(datos$Latitud, breaks = seq(from = -90, to = 90, by =10))
datos$long_class = cut(datos$Longitud, breaks = seq(from = -180, to = 180, by = 10))

tt = table(datos$lat_class,datos$long_class)
tt = tt[nrow(tt):1,]
tt
mosaicplot(t(tt), shade = T)
```

## Análisis de datos temporal



```{r}
datos_por_fecha = aggregate(
  cbind(Casos_Confirmados, Casos_Muertos, Casos_Recuperados) ~ Fecha,
  data = datos,
  FUN = sum
)
```

```{r}
head(datos_por_fecha)
```
```{r}
tail(datos_por_fecha)
```

```{r}
datos_por_fecha$Enfermos = datos_por_fecha$Casos_Confirmados - datos_por_fecha$Casos_Muertos - datos_por_fecha$Casos_Recuperados
```

```{r}
barplot(Casos_Confirmados ~ Fecha, data  = datos_por_fecha)
```

```{r}
plot(Casos_Confirmados ~ Fecha , data = datos_por_fecha, col = 'blue', type = 'l', main = 'Casos documentados por día', xlab = 'Fecha', ylab = 'Nº de personas', log = 'y')
lines(Casos_Muertos ~ Fecha, data = datos_por_fecha, col = 'red')
lines(Casos_Recuperados ~ Fecha, data = datos_por_fecha, col = 'green')
legend('topleft', c('Confirmados', 'Muertos', 'Recuperados'), col = c('blue', 'red', 'green'), pch = 1, lwd = 2)



datos_por_fecha_ts <- xts(x = datos_por_fecha[,2:5], order.by = datos_por_fecha$Fecha)

dygraph(datos_por_fecha_ts) %>%
  dyOptions(labelsUTC = T, labelsKMB = T,
            fillGraph = T, fillAlpha = 0.05,
            drawGrid = T) %>%
  dyRangeSelector() %>%
  dyCrosshair(direction = 'vertical') %>%
  dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2,
              hideOnMouseOut = F)
```

Análisis de España

```{r}
datos_spain = datos %>% filter(Pais_Region=='Spain') %>%
  select(Fecha, starts_with('Casos'))

plot(Casos_Confirmados ~ Fecha, data = datos_por_fecha , main = 'Casos Confirmados en España',type = 's', col = 'blue', lwd = 2)
```

```{r}
barplot(as.matrix(t(datos_spain[, 3:5])), names =datos_spain$Fecha, col = c('red','green','yellow'), main = 'Estudio de casos por tipo en España', xlab='Fecha', ylab = 'Numero de personas')
legend('topleft', c('Muertos','Recuperados','Confirmados'), col = c('red','green','yellow'), pch = 1, lwd = 2)
```

```{r}
datos_por_fecha_ts <- xts(x = datos_spain[,2:5], order.by = datos_spain$Fecha)

dygraph(datos_por_fecha_ts) %>%
  dyOptions(labelsUTC = T, labelsKMB = T,
            fillGraph = T, fillAlpha = 0.05,
            drawGrid = T) %>%
  dyRangeSelector() %>%
  dyCrosshair(direction = 'vertical') %>%
  dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2,
              hideOnMouseOut = F)
```

```{r}
datos_spain$Casos_Confirmados
lag(datos_spain$Casos_Confirmados, n=4)
```


```{r}
lead(datos_spain$Casos_Confirmados, n = 1)
```

```{r}
datos_spain %<>%
  mutate(Nuevos_Casos_Confirmados = Casos_Confirmados - lag(Casos_Confirmados, n = 1),
         Nuevos_Casos_Muertos = Casos_Muertos - lag(Casos_Muertos, n = 1),
         Nuevos_Casos_Recuperados = Casos_Recuperados - lag(Casos_Recuperados, n = 1))

datos_spain %>% kable()
```

```{r}
plot(Nuevos_Casos_Confirmados~Fecha,
     data = datos_spain, type = 'l',
     xlab = 'Fecha',
     ylab = 'Nuevos Casos',
     main = 'Nuevos registros en España',
     col = 'blue')
lines(Nuevos_Casos_Muertos~Fecha,
      data = datos_spain,
      type = 'l',
      col = 'red')
lines(Nuevos_Casos_Recuperados~Fecha,
      data = datos_spain,
      type = 'l', col = 'green')

legend('topleft', c('Confirmados', 'Muertos', 'Recuperados'), col = c('blue', 'red', 'green'), lwd = 2, pch = 1)
```

Análisis por Cohorte

```{r}
Primer_Contagio = datos %>% group_by(Pais_Region) %>%
  filter(Casos_Confirmados > 0) %>%
  summarise(Primer_Contagio = min(Fecha)-1)
  

Primer_Contagio

data_first = datos %>% 
  inner_join(primer_contagio, by = 'Pais_Region') %>%
  mutate(Dias_Desde_PC = as.numeric(Fecha - Primer_Contagio)) %>%
  filter(Dias_Desde_PC > 0) %>%
  group_by(Dias_Desde_PC, Pais_Region) %>%
  summarise(Casos_Confirmados = sum(Casos_Confirmados),
            Casos_Muertos = sum(Casos_Muertos),
            Casos_Enfermos = sum(Casos_Enfermos),
            Casos_Recuperados = sum(Casos_Recuperados))


data_first %>%
  filter(Pais_Region %in% c('Spain', 'Italy','China', 'United States', 'Germany')) %>%
  ggplot(aes(x = Dias_Desde_PC, y = Casos_Confirmados)) +
  xlab('Dia desde el primero contagio') +
  ylab('Numero de personas contagiadas') +
  ggtitle('Analisis por Cohortes') +
  geom_line(aes(col = Pais_Region)) +
  theme(legend.position = 'top') -> g

ggplotly(g)
```

## Modelos de Regresión

* $x$: Variable independiente: Numero de dias desde el origen de la pandemia
* $y$: Variable Dependiente: número de casos confirmados.

$$y = f(x)$$
```{r}
datos_spain$Dias = as.numeric(datos_spain$Fecha - dmy("22/01/2020"))
datos_spain$Dias
```

Modelo de Regresión Lineal : Simple o Multiple.

Nosotros haremos modelos de regresion lineal simple.

$$y = ax + b, a, b\in \mathbb R$$
$$min_{a,b\in\mathbb R} \sum_{i=1}^n (y_i-(ax_i+b))^2$$
```{r}
mod1 <- lm(Casos_Confirmados ~ Dias, data = datos_spain)
summary(mod1)
```

$$Casos\ Confirmados = `r mod1$coefficients[2]` Dias + `r mod1$coefficients[1]`$$



¿Como saber si nuestro modelo es correcto?

```{r}
plot(datos_spain$Dias, datos_spain$Casos_Confirmados)
abline(mod1, col = 'red')
```


```{r}
plot(mod1$residuals ~mod1$fitted.values, xlab = 'Valores Ajustados', ylab = 'Residuos del Modelo')
```


```{r}
residuos = mod1$residuals

qqPlot(residuos, distribution = 'norm', mean = mean(residuos),
       sd = sd(residuos))
```

## Regresion Exponencial
$$log(y) = ax+b$$

$$y = e^{ax+b} = m e^{ax}$$

```{r}
mod2 = lm(log(Casos_Confirmados)~Dias, data = datos_spain[datos_spain$Casos_Confirmados>0, ])

summary(mod2)
```


```{r}
plot(datos_spain$Dias, datos_spain$Casos_Confirmados)
lines(exp(mod2$coefficients[1])*exp(mod2$coefficients[2]*datos_spain$Dias), col = 'green')
```


```{r}
plot(mod2$residuals ~ mod2$fitted.values, xlab = 'Valores ajustados', ylab = 'Residuos del modelo')

residuos = mod2$residuals

qqPlot(residuos, distribution = 'norm', mean = mean(residuos), sd = sd(residuos))
```

Modelo Potencial

$$log(y) = a\cdot log(x)+b, a,b\in \mathbb R$$
$$y = e^{a\cdot log(x)+b} = E+b\cdot e^{log(x)^a} = m\cdot x^a$$
```{r}
mod3 <- lm(log(Casos_Confirmados) ~ log(Dias),
           data = datos_spain[datos_spain$Casos_Confirmados > 0,])
summary(mod3)
```

$$Casos\ Confirmados = `r exp(mod3$coefficients[1])`\cdot Dias^{`r mod3$coefficientes[2]`}$$

```{r}
plot(datos_spain$Dias, datos$spain$Casos_Confirmados)
lines(exp(mod3$coefficients[1])*datos_spain$Dias^mod3$coefficients[2], col = 'green')

plot(mod3$residuals ~ mod3$fitted.values, xlab = 'Valores ajustados', ylab = 'Residuos del modelo')

residuos = mod3$residuals
qqPlot(residuos, distribution = 'norm', mean = mean(residuos), sd = sd(residuos))
```

```{r}
mi_model <- lm(log(Casos_Confirmados) ~ Dias + log(Dias), data = datos_spain[datos$Casos_Confirmados > 0,])

summary(mi_model)
```




```{r}
start_date = ymd('2020-01-22')
end_date = ymd('2020-04-30')
dates = seq(start_date+1, end_date, by = "1 day")
days_since_start = as.numeric(dates - start_date)
new_data = data.frame(Dias = days_since_start)
pred1 = predict(mod1, newdata = new_data)
pred2 = exp(predict(mod2, newdata = new_data))
pred3 = exp(predict(mod3, newdata = new_data))
pred4 = exp(predict(mi_model, newdata = new_data))

```
```{r}
datos_por_fecha_ts = xts(x = data.frame(Real = c(datos_spain$Casos_Confirmados,
                                        Mod_Lin = pred1,
                                        #Mod_Exp = pred2, 
                                        Mod_Pot = pred3, 
                                        Mod_Mixt = pred4),
                         order.by = dates))
dygraph(datos_por_fecha_ts)
```



```{r}
start_date = ymd('2020-01-22')
end_date = ymd('2020-04-30')

dates = seq(start_date+1, end_date, by = '1 day')

days_since_start = as.numeric(dates - start_date)

new_data = data.frame(Dias = days_since_start)##columna dias

pred1 <- predict(mod1, newdata = new_data)
pred2 <- exp(predict(mod2, newdata = new_data))
pred3 <- exp(predict(mod3, newdata = new_data))
pred4 <- exp(predict(mi_model, newdata = new_data))

datos_por_fecha_ts = xts(x = data.frame(Real = c(datos_spain$Datos_Confirmados,                       rep(0,length(pred1)-length(datos_spain$Casos_Confirmados))),
                                        Mod_Lin = pred1,
                                        Mod_Exp = pred2,
                                        Mod_Pot = pred3,
                                        Mod_Mixt = pred4),
                         order.by = dates)
dygraph(datos_por_fecha_ts)
```

------------Segunda Parte-----------------------
Contraste de hipotesis

```{r}
covid19 <- read.csv('covid_19_clean_complete.csv')

str(covid19)
```

```{r}
library(wbstats)

pop_data <- wb(indicator = 'SP.POP.TOTL', startdate = 2018, enddate = 2019)
```

```{r}
pop_data[pop_data$country=='Spain',]
```

Limpiar los datos, aquellos paises no tenemos datos o que su poblacion no está en la tabla de datos

```{r}
paises = unique(covid19$Country.Region)
paises
str(paises)
```

```{r}
covid19.limpio = c()
for (i in 1:length(paises)){
  if(length(which(paises[i] %in% pop_data$country))>0){
    covid19.limpio = rbind(covid19.limpio, covid19[covid19$Country.Region==paises[i],])
  }
}
```



```{r}
covid19.limpio$Date=as.Date(as.character(covid19.limpio$Date),"%m/%d/%Y")
infectados.totales.por.dia = aggregate(covid19.limpio$Confirmed ~ 
                    covid19.limpio$Date,FUN=sum)
fallecidos.totales.por.dia = aggregate(covid19.limpio$Deaths ~ 
                    covid19.limpio$Date,FUN=sum)
recuperados.totales.por.dia = aggregate(covid19.limpio$Recovered ~ 
                    covid19.limpio$Date,FUN=sum)
tabla.totales = data.frame(infectados.totales.por.dia[,1],infectados.totales.por.dia[,2],
              fallecidos.totales.por.dia[,2],recuperados.totales.por.dia[,2])
names(tabla.totales) = c("Fecha", "Infectados", "Fallecidos", "Recuperados")
```



```{r}
covid19.limpio$Date = as.Date(as.character(covid19.limpio$Date),"%m/%d/%Y")

infectados.totales.por.dia = aggregate(covid19.limpio$Confirmed ~ 
                                         covid19.limpio$Date,FUN=sum)
fallecidos.totales.por.dia = aggregate(covid19.limpio$Deaths ~ 
                                         covid19.limpio$Date,FUN=sum)
recuperados.totales.por.dia = aggregate(covid19.limpio$Recovered ~ 
                                          covid19.limpio$Date,FUN=sum)

##Lo juntamos todo

tabla.totales = data.frame(infectados.totales.por.dia[,1],
                           infectados.totales.por.dia[,2],
                           fallecidos.totales.por.dia[,2],
                           recuperados.totales.por.dia[,2])


names(tabla.totales) <- c('Fecha', 'Infectados', 'Fallecidos', 'Recuperados')
```



```{r}
head(tabla.totales, 10)
```


```{r}
library(ggplot2)


x = tabla.totales[,1]
ggplot(tabla.totales, aes(x)) +
  geom_line(aes(y = tabla.totales$Infectados, colour='Infectados')) +
  geom_line(aes(y = tabla.totales$Fallecidos, colour='Fallecidos')) +
  geom_line(aes(y = tabla.totales$Recuperados, colour='Recuperados')) +
  xlab('Fecha') + ylab('Frecuencias') +
  scale_color_manual(values = c('red', 'blue', 'green'))

```
```{r}
fecha <-ymd('0020-03-15')
class(fecha)
```



```{r}
confirmados.por.pais = aggregate(covid19.limpio$Confirmed[covid19.limpio$Date==fecha] ~ 
                    covid19.limpio$Country.Region[covid19.limpio$Date==fecha],FUN=sum)

names(confirmados.por.pais)=c("Pais","Confirmados")
```


```{r}
head(confirmados.por.pais,10)
```


```{r}
paises <- unique(covid19.limpio$Country.Region)
sum.total.habitantes <- sum(pop_data[pop_data$country %in% paises,]$value)
numero.total.infectados <- sum(confirmados.por.pais$Confirmados)
```






```{r}
tabla.infectados.paises <- c()

for (i in 1:length(paises)){
  habitantes <- pop_data[pop_data$country==paises[i],]$value
  confirmados <- confirmados.por.pais$Confirmados[confirmados.por.pais$Pais==paises[i]]
  confirmados.estimados <- numero.total.infectados*habitantes/sum.total.habitantes
  tabla.infectados.paises=rbind(tabla.infectados.paises, c(confirmados,confirmados.estimados))
}


tabla.infectados.paises <- as.data.frame(tabla.infectados.paises)
tabla.infectados.paises <- data.frame(paises, tabla.infectados.paises)
names(tabla.infectados.paises) = c("Pais", "infectados", "infectados.estimados")
```

```{r}
chisq.test(tabla.infectados.paises$infectados,
           p=tabla.infectados.paises$infectados.estimados/sum(tabla.infectados.paises$infectados))
```

Vemos los paises que ei es menor que 5

```{r}
paises.con.problemas <- which(tabla.infectados.paises$infectados.estimados < 5)
paises[paises.con.problemas]

```

```{r}
tabla.infectados.paises2 <- tabla.infectados.paises[-paises.con.problemas,]

pais.añadir <- data.frame("problemas", sum(tabla.infectados.paises[
  tabla.infectados.paises$pais%in% paises[paises.con.problemas],]
  $infectados),sum(tabla.infectados.paises[tabla.infectados.paises$
  pais %in% paises[paises.con.problemas],]$infectados.estimados))

names(pais.añadir) = names(tabla.infectados.paises2)
pais.añadir
                          
                    
                        

```

Lo añadimos

```{r}
tabla.infectados.paises2 = rbind(tabla.infectados.paises2, pais.añadir)

chisq.test(tabla.infectados.paises2$infectados,
           p = tabla.infectados.paises2$infectados.estimados/sum(tabla.infectados.paises2$infectados))
```

